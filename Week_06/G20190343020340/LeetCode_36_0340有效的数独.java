package com.exercise.week_six;/** * @ClassName: * @Description: * @Author: * @Date: */import java.util.HashMap;/** *@ClassName LeetCode_36_0340有效的数独 *@Description *@Autor *@Date 2020/2/2320:38 *@Version 1.0 *@Example **/public class LeetCode_36_0340有效的数独 {    public boolean isValidSudoku(char[][] board) {        // 建立三个初始化数组，横，竖，方块        HashMap<Integer, Integer>[] rows = new HashMap[9];        HashMap<Integer, Integer> [] columns = new HashMap[9];        HashMap<Integer, Integer> [] boxes = new HashMap[9];        for (int i = 0; i < 9; i++) {            rows[i] = new HashMap<Integer, Integer>();            columns[i] = new HashMap<Integer, Integer>();            boxes[i] = new HashMap<Integer, Integer>();        }        // 遍历map是否存在相同        for (int i = 0; i < 9; i++) {            for (int j = 0; j < 9; j++) {                char num = board[i][j];                if (num != '.') {                    int n = (int)num;                    int box_index = (i / 3 ) * 3 + j / 3;                    rows[i].put(n, rows[i].getOrDefault(n, 0) + 1);                    columns[j].put(n, columns[j].getOrDefault(n, 0) + 1);                    boxes[box_index].put(n, boxes[box_index].getOrDefault(n, 0) + 1);                    if (rows[i].get(n) > 1 || columns[j].get(n) > 1 || boxes[box_index].get(n) > 1)                        return false;                }            }        }        return true;    }}