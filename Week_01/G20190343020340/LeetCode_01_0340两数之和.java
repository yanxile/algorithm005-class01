package com.exercise.week_one.home;/** * @ClassName: * @Description: * @Author: * @Date: */import java.lang.reflect.Array;import java.util.Arrays;import java.util.HashMap;/** *@ClassName LeetCode_01_0340两数之和 *@Description *@Autor *@Date 2019/12/1521:27 *@Version 1.0 *@Example **/public class LeetCode_01_0340两数之和 {    public static void main(String[] args) {        int[] arr = {2, 7, 11, 15};        int[] resultArr =  twoSum(arr,9);        System.out.println(Arrays.toString(resultArr));        System.out.println(Arrays.toString(twoSum1(arr,9)));    }    // 利用哈希表唯一性来解决    public static int[] twoSum(int[] nums, int target) {        HashMap<Integer,Integer> map = new HashMap<>();        for (int i = 0; i < nums.length; i++) {            if (map.get(target - nums[i]) != null){                return new int[]{map.get(target - nums[i]),i};            }else {                map.put(nums[i],i);            }        }        return new int[]{};    }    // 暴力解法两重循环    public static int[] twoSum1(int[] nums, int target) {        // 循环解法类似冒泡排序。。。        for (int i = 0; i < nums.length - 1; i++) {            for (int j = i+1; j < nums.length; j++) {                if (nums[i] + nums[j] == target){                    return new int[]{i,j};                }            }        }        return new int[]{};    }}