package com.exercise.week_five.home;/** * @ClassName: * @Description: * @Author: * @Date: *//** *@ClassName LeetCode_221_0340最大正方形 *@Description *@Autor HDR *@Date 2020/1/1223:30 *@Version 1.0 *@Example **/public class LeetCode_221_0340最大正方形 {    /*    *  其实和最短路径和问题差不多。难点都是在推导DP状态转移方程    *  画图后更容易理解一些，画图很方便理解。正方形，是一个平方。    * */    public int maximalSquare(char[][] matrix) {        int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0;        int[][] dp = new int[rows + 1][cols + 1];        int maxsqlen = 0;        for (int i = 1; i <= rows; i++) {            for (int j = 1; j <= cols; j++) {                if (matrix[i-1][j-1] == '1'){                    dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;                    maxsqlen = Math.max(maxsqlen, dp[i][j]);                }            }        }        return maxsqlen * maxsqlen;    }}