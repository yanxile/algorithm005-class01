package com.exercise.week_two.home;/** * @ClassName: * @Description: * @Author: * @Date: */import java.util.*;public class LeetCode_94_0340二叉树的中序遍历 {    public static void main(String[] args) {        TreeNode treeNode = new TreeNode(1);        treeNode.right = new TreeNode(2);        treeNode.right.left = new TreeNode(3);        List<Integer> list = inorderTraversal1(treeNode);        for (Integer x:list) {            System.out.println(x);        }    }    // 递归法解决-中序遍历顺序为左根右    public static List<Integer> inorderTraversal(TreeNode root) {        List<Integer> list =new ArrayList<>();        if(root != null){            helper(list,root);        }        return list;    }    private static void helper(List<Integer> list, TreeNode root) {        if (root.left != null){            helper(list,root.left);        }        list.add(root.val);        if (root.right != null){            helper(list,root.right);        }    }    // 使用stack先进后出来解决    public static List<Integer> inorderTraversal1(TreeNode root) {        List<Integer> list =new ArrayList<>();        if (root == null) {            return list;        }        Stack<TreeNode> stack = new Stack<>();        while (root != null || !stack.empty()){            // 先把左子树压进栈            while (root != null){                stack.push(root);                root = root.left;            }            root = stack.pop();            list.add(root.val);            root = root.right;        }        return list;    }}