package com.exercise.week_two.home;/** * @ClassName: * @Description: * @Author: * @Date: */import java.lang.reflect.Array;import java.util.Arrays;import java.util.HashMap;/** *@ClassName LeetCode_01_0340两数之和 *@Description *@Autor *@Date 2019/12/1521:27 *@Version 1.0 *@Example **/public class LeetCode_242_0340有效的字母异味词 {    public static void main(String[] args) {        System.out.println();        System.out.println(isAnagram2("anagram","nagaram"));    }    // 利用Java排序，把排序好的字符串进行比对    public static boolean isAnagram1(String s, String t) {        // 判断两个字符串长度是否相等，如果不相等，返回false        if(s.length() != t.length()){            return false;        }        //两个字符串数组进行排序        char[] sCharArray = s.toCharArray();        char[] tCharArray = t.toCharArray();        Arrays.sort(sCharArray);        Arrays.sort(tCharArray);        return Arrays.equals(sCharArray,tCharArray);    }    // 利用哈希表实现    public static boolean isAnagram2(String s, String t) {        // 判断两个字符串长度是否相等，如果不相等，返回false        if(s.length() != t.length()){            return false;        }        HashMap<Character,Integer> map = new HashMap<>();        //统计出现次数        char[] sCharArray = s.toCharArray();        char[] tCharArray = t.toCharArray();        /*for (int i = 0; i < sCharArray.length; i++) {            if (map.get(sCharArray[i]) != null){                map.put(sCharArray[i],map.get(sCharArray[i])+1);            }else {                map.put(sCharArray[i],1);            }        }*/        //第二个单词减少重复次数  优化前。。。        /*for (int i = 0; i < tCharArray.length; i++) {            if (map.get(tCharArray[i]) != null){                map.put(tCharArray[i],map.get(tCharArray[i])-1);                if (map.get(tCharArray[i]) == 0){                    map.remove(tCharArray[i]);                }            }else {                return false;            }        }*/        //第二个单词数组 优化后，leetcode数组启发        /*for (int i = 0; i < tCharArray.length; i++) {            if (map.get(tCharArray[i]) != null){                map.put(tCharArray[i],map.get(tCharArray[i])-1);            }else {                return false;            }        }*/                        // 国际站学到的一站式hash.        for (int i = 0; i < sCharArray.length; i++) {            map.put(sCharArray[i],map.getOrDefault(sCharArray[i],0)+1);            map.put(tCharArray[i],map.getOrDefault(tCharArray[i],0)-1);        }        for (Character key:map.keySet()){            if (map.get(key) != 0){                return false;            }        }        return true;    }    // 从leetcode学到的方法，很厉害。    public static boolean isAnagram3(String s, String t) {        // 判断两个字符串长度是否相等，如果不相等，返回false        if(s.length() != t.length()){            return false;        }        //利用所有字母只有26个这种方式。如果两个单词为异位词，那么26个字母的出现次数一定相等        // 数组元素默认值为0        int[] array = new int[26];        for (int i = 0; i < s.length(); i++) {            // char计算会变成as2码相减，a-a=0，b-a=1 ...            // 对s出现的单词+1            array[s.charAt(i) - 'a']++;            // 对t出现的单词-1            array[t.charAt(i) - 'a']--;        }        // 判断数组中的元素值是否都为0        for (int i = 0; i < array.length; i++) {            // 不等于0说明出现次数不一致            if(array[i] != 0){                return false;            }        }        return true;    }}