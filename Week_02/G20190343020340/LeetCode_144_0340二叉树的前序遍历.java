package com.exercise.week_two.home;/** * @ClassName: * @Description: * @Author: * @Date: */import java.util.*;/** *@ClassName LeetCode_01_0340两数之和 *@Description *@Autor *@Date 2019/12/1521:27 *@Version 1.0 *@Example **/public class LeetCode_144_0340二叉树的前序遍历 {    public static void main(String[] args) {        TreeNode treeNode = new TreeNode(1);        treeNode.right = new TreeNode(2);        treeNode.right.left = new TreeNode(3);        List<Integer> list = preorderTraversal1(treeNode);        for (Integer x:list) {            System.out.println(x);        }    }    // 递归法解决-前序遍历顺序为根左右    public static List<Integer> preorderTraversal(TreeNode root) {        List<Integer> list =new ArrayList<>();        if(root != null){            helper(list,root);        }        return list;    }    private static void helper(List<Integer> list, TreeNode root) {        list.add(root.val);        if (root.left != null){            helper(list,root.left);        }        if (root.right != null){            helper(list,root.right);        }    }    // 使用stack先进后出来解决    public static List<Integer> preorderTraversal1(TreeNode root) {        List<Integer> list =new ArrayList<>();        if (root == null) {            return list;        }        Stack<TreeNode> stack = new Stack<>();        stack.push(root);        while (!stack.isEmpty()){            root = stack.pop();            list.add(root.val);            // 先压右在压左            if(root.right != null){                stack.push(root.right);            }            if(root.left != null){                stack.push(root.left);            }        }        return list;    }}