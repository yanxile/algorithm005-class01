
class Solution {
    func solveNQueens(_ n: Int) -> [[String]] {
        if n <= 0 {
            return []
        }

        var result = [[Int]]()
        let rowarray = [Int].init(repeating: 0, count: n+1)
        
        var nocol = [Int:Int]()
        var nop = [Int:Int]()
        var noNa = [Int:Int]()
        
        solveOneQueens(1,rowarray, &result,&nocol,&nop,&noNa)

        return returnStringArray(result,n)
    }
    
    func solveOneQueens(_ row:Int , _ rowarray:[Int], _ result:inout [[Int]], _ nocol:inout [Int:Int], _ nop:inout [Int:Int],_ noNa:inout [Int:Int])  {
        if(row == rowarray.count){
            result.append(rowarray)
            return
        }
        
        let n = rowarray.count
    

        for i in 1 ..< n{
        
            if((nocol[i] != nil) || (nop[row+i] != nil) || (noNa[row-i] != nil)){
                continue
            }else{
                var  rowarraynext  = rowarray
                rowarraynext[row] = i
                nocol[i] = 1
                nop[row+i] = 1
                noNa[row-i] = 1
                solveOneQueens(row+1,rowarraynext,&result,&nocol,&nop,&noNa)
                
                nocol[i] = nil
                nop[row+i] = nil
                noNa[row-i] = nil
            }
        }
    }
    
    func returnStringArray(_ result:[[Int]],_ n:Int) ->  [[String]] {
        var resultStringArray = [[String]]()
    
        for oneArray in result {
            
            var onestring = [String]()
    
            for i in 0 ..< n{
                var one  = [Character].init(repeating:".", count: n)
                
                one[oneArray[i+1] - 1] = "Q"
                onestring.append(String(one))
            }
            
            resultStringArray.append(onestring)
           
        }
        
        return resultStringArray

    }
    
    
}


let s = Solution()

print(s.solveNQueens(4))
